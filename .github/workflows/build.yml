name: Build

on:
  push:
    branches: [ main, feat/*, feature/* ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build:
    name: Build on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest]

    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - name: Install dependencies (Linux)
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential cmake
        # Install LLVM and Clang
        wget -O - https://apt.llvm.org/llvm-snapshot.gpg.key | sudo apt-key add -
        sudo apt-add-repository "deb http://apt.llvm.org/jammy/ llvm-toolchain-jammy-16 main"
        sudo apt-get update
        sudo apt-get install -y llvm-16 llvm-16-dev clang-16 libclang-16-dev
        echo "LLVM_DIR=/usr/lib/llvm-16/lib/cmake/llvm" >> $GITHUB_ENV
        echo "Clang_DIR=/usr/lib/llvm-16/lib/cmake/clang" >> $GITHUB_ENV

    - name: Install dependencies (macOS)
      if: runner.os == 'macOS'
      run: |
        brew install cmake llvm
        echo "LLVM_DIR=$(brew --prefix llvm)/lib/cmake/llvm" >> $GITHUB_ENV
        echo "Clang_DIR=$(brew --prefix llvm)/lib/cmake/clang" >> $GITHUB_ENV
        echo "$(brew --prefix llvm)/bin" >> $GITHUB_PATH

    - name: Configure and Build (Linux/macOS)
      if: runner.os == 'Linux' || runner.os == 'macOS'
      run: |
        mkdir -p build && cd build
        cmake .. -DCMAKE_BUILD_TYPE=Release \
                -DLLVM_DIR=${{ env.LLVM_DIR }} \
                -DClang_DIR=${{ env.Clang_DIR }} \
                -DUSE_SHARED_LIB=OFF \
                -DBUILD_TESTS=OFF
        cmake --build . --config Release
        
    - name: Test compiler (Linux/macOS)
      if: runner.os == 'Linux' || runner.os == 'macOS'
      run: |
        cd build
        echo 'int main() { return 0; }' > test.cc
        ./cc -S -emit-llvm test.cc
        
        # Vérifier que le fichier LLVM IR a été généré
        if [ -f "test.ll" ]; then
          echo "Test réussi: Fichier LLVM IR généré avec succès"
          cat test.ll | head -n 10
        else
          echo "Test échoué: Fichier LLVM IR non généré"
          exit 1